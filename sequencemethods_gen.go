// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// SequenceMethods is a concrete realisation of the full set of Sequence
// Protocol methods. A type that implements the "Sequence Protocol" can be
// turned into a SequenceMethods instance using AsSequence.
//
// Note that the methods not already implemented on the type itself may return
// an error, as not all methods are implemented by all types that support the
// protocol.
type SequenceMethods struct {
	o C.PyObject
}

var _ Object = (*SequenceMethods)(nil)







func (s *SequenceMethods) c() *C.PyObject {
	return (*C.PyObject)(unsafe.Pointer(s))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (s *SequenceMethods) Base() *BaseObject {
	return (*BaseObject)(unsafe.Pointer(s))
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (s *SequenceMethods) Type() *Type {
	return newType((*C.PyObject)(unsafe.Pointer(c(s).ob_type)))
}

// Decref decrements s's reference count, s may not be nil.
func (s *SequenceMethods) Decref() {
	C.decref(c(s))
}

// Incref increments s's reference count, s may not be nil.
func (s *SequenceMethods) Incref() {
	C.incref(c(s))
}

// IsTrue returns true if the value of s is considered to be True. This is
// equivalent to "if s:" in Python.
func (s *SequenceMethods) IsTrue() bool {
	ret := C.PyObject_IsTrue(c(s))
	if ret < 0 {
		panic(exception())
	}
	return ret != 0
}

// Not returns true if the value of s is considered to be False. This is
// equivalent to "if not s:" in Python.
func (s *SequenceMethods) Not() bool {
	ret := C.PyObject_Not(c(s))
	if ret < 0 {
		panic(exception())
	}
	return ret != 0
}

// Free deallocates the storage (in Python) for s. After calling this method,
// s should no longer be used.
func (s *SequenceMethods) Free() {
	free(s)
}



/*
set fields:
*/

