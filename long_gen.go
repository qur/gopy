// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// Long represents objects of the LongType (or PyLongType
// in the Python API) type.
//
// This type implements the Number protocol.
type Long struct {
	abstractObject
	o C.PyLongObject
}

// LongType is the Type object that represents the Long type.
var LongType = (*Type)(unsafe.Pointer(&C.PyLong_Type))

func longCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.longCheck(c(obj)) != 0
}

func newLong(obj *C.PyObject) *Long {
	return (*Long)(unsafe.Pointer(obj))
}

func (l *Long) AsNumber() *NumberMethods {
	return (*NumberMethods)(unsafe.Pointer(l.Base()))
}

func (l *Long) Add(obj Object) (Object, error) {
	ret := C.PyNumber_Add(c(l), c(obj))
	return obj2ObjErr(ret)
}

func (l *Long) Subtract(obj Object) (Object, error) {
	ret := C.PyNumber_Subtract(c(l), c(obj))
	return obj2ObjErr(ret)
}

func (l *Long) Multiply(obj Object) (Object, error) {
	ret := C.PyNumber_Multiply(c(l), c(obj))
	return obj2ObjErr(ret)
}

func (l *Long) FloorDivide(obj Object) (Object, error) {
	ret := C.PyNumber_FloorDivide(c(l), c(obj))
	return obj2ObjErr(ret)
}

func (l *Long) TrueDivide(obj Object) (Object, error) {
	ret := C.PyNumber_TrueDivide(c(l), c(obj))
	return obj2ObjErr(ret)
}

func (l *Long) Remainder(obj Object) (Object, error) {
	ret := C.PyNumber_Remainder(c(l), c(obj))
	return obj2ObjErr(ret)
}

func (l *Long) Divmod(obj Object) (Object, error) {
	ret := C.PyNumber_Divmod(c(l), c(obj))
	return obj2ObjErr(ret)
}

func (l *Long) Power(obj1, obj2 Object) (Object, error) {
	ret := C.PyNumber_Power(c(l), c(obj1), c(obj2))
	return obj2ObjErr(ret)
}

func (l *Long) Negative() (Object, error) {
	ret := C.PyNumber_Negative(c(l))
	return obj2ObjErr(ret)
}

func (l *Long) Positive() (Object, error) {
	ret := C.PyNumber_Positive(c(l))
	return obj2ObjErr(ret)
}

func (l *Long) Absolute() (Object, error) {
	ret := C.PyNumber_Absolute(c(l))
	return obj2ObjErr(ret)
}

func (l *Long) Invert() (Object, error) {
	ret := C.PyNumber_Invert(c(l))
	return obj2ObjErr(ret)
}

func (l *Long) LShift(obj Object) (Object, error) {
	ret := C.PyNumber_Lshift(c(l), c(obj))
	return obj2ObjErr(ret)
}

func (l *Long) RShift(obj Object) (Object, error) {
	ret := C.PyNumber_Rshift(c(l), c(obj))
	return obj2ObjErr(ret)
}

func (l *Long) And(obj Object) (Object, error) {
	ret := C.PyNumber_And(c(l), c(obj))
	return obj2ObjErr(ret)
}

func (l *Long) Xor(obj Object) (Object, error) {
	ret := C.PyNumber_Xor(c(l), c(obj))
	return obj2ObjErr(ret)
}

func (l *Long) Or(obj Object) (Object, error) {
	ret := C.PyNumber_Or(c(l), c(obj))
	return obj2ObjErr(ret)
}

func (l *Long) Float() (*Float, error) {
	ret := C.PyNumber_Float(c(l))
	return newFloat(ret), exception()
}

func (l *Long) Index() (*Long, error) {
	ret := C.PyNumber_Index(c(l))
	return newLong(ret), exception()
}

func (l *Long) ToBase(base int) (*Long, error) {
	ret := C.PyNumber_ToBase(c(l), C.int(base))
	return newLong(ret), exception()
}

func (l *Long) AsInt(exc *ExceptionClass) (int, error) {
	ret := C.PyNumber_AsSsize_t(c(l), c(exc))
	return int(ret), exception()
}



/*
set fields:
  nb_absolute
  nb_add
  nb_and
  nb_bool
  nb_divmod
  nb_float
  nb_floor_divide
  nb_index
  nb_int
  nb_invert
  nb_lshift
  nb_multiply
  nb_negative
  nb_or
  nb_positive
  nb_power
  nb_remainder
  nb_rshift
  nb_subtract
  nb_true_divide
  nb_xor
  ob_base
  tp_as_number
  tp_basicsize
  tp_doc
  tp_flags
  tp_free
  tp_getattro
  tp_getset
  tp_hash
  tp_itemsize
  tp_methods
  tp_name
  tp_new
  tp_repr
  tp_richcompare
*/

