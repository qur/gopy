// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// FrozenSet represents objects of the FrozenSetType (or PyFrozenSetType
// in the Python API) type.
type FrozenSet struct {
	o C.PyObject
}

var _ Object = (*FrozenSet)(nil)

// FrozenSetType is the Type object that represents the FrozenSet type.
var FrozenSetType = (*Type)(unsafe.Pointer(&C.PyFrozenSet_Type))

func frozenSetCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.frozenSetCheck(c(obj)) != 0
}

func newFrozenSet(obj *C.PyObject) *FrozenSet {
	return (*FrozenSet)(unsafe.Pointer(obj))
}

func (f *FrozenSet) c() *C.PyObject {
	return (*C.PyObject)(unsafe.Pointer(f))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (f *FrozenSet) Base() *BaseObject {
	return (*BaseObject)(unsafe.Pointer(f))
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (f *FrozenSet) Type() *Type {
	return newType((*C.PyObject)(unsafe.Pointer(c(f).ob_type)))
}

// Decref decrements f's reference count, f may not be nil.
func (f *FrozenSet) Decref() {
	C.decref(c(f))
}

// Incref increments f's reference count, f may not be nil.
func (f *FrozenSet) Incref() {
	C.incref(c(f))
}

// IsTrue returns true if the value of f is considered to be True. This is
// equivalent to "if f:" in Python.
func (f *FrozenSet) IsTrue() bool {
	ret := C.PyObject_IsTrue(c(f))
	if ret < 0 {
		panic(exception())
	}
	return ret != 0
}

// Not returns true if the value of f is considered to be False. This is
// equivalent to "if not f:" in Python.
func (f *FrozenSet) Not() bool {
	ret := C.PyObject_Not(c(f))
	if ret < 0 {
		panic(exception())
	}
	return ret != 0
}

// Free deallocates the storage (in Python) for f. After calling this method,
// f should no longer be used.
func (f *FrozenSet) Free() {
	free(f)
}



/*
set fields:
*/

