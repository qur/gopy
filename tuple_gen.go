// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

type Tuple struct {
	abstractObject
	o C.PyTupleObject
}

// TupleType is the Type object that represents the Tuple type.
var TupleType = (*Type)(unsafe.Pointer(&C.PyTuple_Type))

func tupleCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.tupleCheck(c(obj)) != 0
}

func newTuple(obj *C.PyObject) *Tuple {
	return (*Tuple)(unsafe.Pointer(obj))
}

func (t *Tuple) Size() int {
	ret := C.PyObject_Size(c(t))
	if ret < 0 {
		return 0
	}
	return int(ret)
}

func (t *Tuple) GetItemString(key string) (Object, error) {
	cKey := C.CString(key)
	defer C.free(unsafe.Pointer(cKey))
	ret := C.PyMapping_GetItemString(c(t), cKey)
	return obj2ObjErr(ret)
}

func (t *Tuple) HasKey(key Object) bool {
	ret := C.PyMapping_HasKey(c(t), c(key))
	return ret > 0
}

func (t *Tuple) HasKeyString(key string) bool {
	cKey := C.CString(key)
	defer C.free(unsafe.Pointer(cKey))
	ret := C.PyMapping_HasKeyString(c(t), cKey)
	return ret > 0
}



/*
mp_length = true
mp_subscript = true
ob_base = true
sq_concat = true
sq_contains = true
sq_item = true
sq_length = true
sq_repeat = true
tp_as_mapping = true
tp_as_sequence = true
tp_basicsize = true
tp_dealloc = true
tp_doc = true
tp_flags = true
tp_free = true
tp_getattro = true
tp_hash = true
tp_itemsize = true
tp_iter = true
tp_methods = true
tp_name = true
tp_new = true
tp_repr = true
tp_richcompare = true
tp_traverse = true
tp_vectorcall = true
*/

