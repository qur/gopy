// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// Bool is the representation of the Python bool type. There are only two
// possible values for a Bool, True and False. Every True value refers to the
// same instance, and every False value refers to the same value.
type Bool struct {
	o C.PyObject
}

var _ Object = (*Bool)(nil)

// BoolType is the Type object that represents the Bool type.
var BoolType = newType(&C.PyBool_Type)

func boolCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.boolCheck(c(obj)) != 0
}



func (b *Bool) c() *C.PyObject {
	return (*C.PyObject)(unsafe.Pointer(b))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (b *Bool) Base() *BaseObject {
	return (*BaseObject)(unsafe.Pointer(b))
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (b *Bool) Type() *Type {
	return newType(c(b).ob_type)
}

// Decref decrements b's reference count, b may not be nil.
func (b *Bool) Decref() {
	C.decref(c(b))
}

// Incref increments b's reference count, b may not be nil.
func (b *Bool) Incref() {
	C.incref(c(b))
}

func (b *Bool) raw() *C.PyObject {
	return (*C.PyObject)(unsafe.Pointer(b))
}



/*
set fields:
*/

