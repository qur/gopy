// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// Unicode represents objects of the UnicodeType (or PyUnicodeType
// in the Python API) type.
//
// This type implements the Mapping protocol.
//
// This type implements the Sequence protocol.
type Unicode struct {
	abstractObject
	o C.PyUnicodeObject
}

// UnicodeType is the Type object that represents the Unicode type.
var UnicodeType = (*Type)(unsafe.Pointer(&C.PyUnicode_Type))

func unicodeCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.unicodeCheck(c(obj)) != 0
}

func newUnicode(obj *C.PyObject) *Unicode {
	return (*Unicode)(unsafe.Pointer(obj))
}

func (u *Unicode) Size() int {
	ret := C.PyObject_Size(c(u))
	if ret < 0 {
		clearErr();
		return 0
	}
	return int(ret)
}

func (u *Unicode) AsMapping() *MappingMethods {
	return (*MappingMethods)(unsafe.Pointer(u.Base()))
}

func (u *Unicode) GetItemString(key string) (Object, error) {
	cKey := C.CString(key)
	defer C.free(unsafe.Pointer(cKey))
	ret := C.PyMapping_GetItemString(c(u), cKey)
	return obj2ObjErr(ret)
}

func (u *Unicode) HasKey(key Object) bool {
	ret := C.PyMapping_HasKey(c(u), c(key))
	clearErr();
	return ret > 0
}

func (u *Unicode) HasKeyString(key string) bool {
	cKey := C.CString(key)
	defer C.free(unsafe.Pointer(cKey))
	ret := C.PyMapping_HasKeyString(c(u), cKey)
	clearErr();
	return ret > 0
}

func (u *Unicode) AsSequence() *SequenceMethods {
	return (*SequenceMethods)(unsafe.Pointer(u.Base()))
}

func (u *Unicode) GetIndex(idx int) (Object, error) {
	ret := C.PySequence_GetItem(c(u), C.Py_ssize_t(idx))
	return obj2ObjErr(ret)
}

func (u *Unicode) Count(obj Object) (int, error) {
	ret := C.PySequence_Count(c(u), c(obj))
	return ssize_t2IntErr(ret)
}

func (u *Unicode) Index(obj Object) (int, error) {
	ret := C.PySequence_Index(c(u), c(obj))
	return ssize_t2IntErr(ret)
}

func (u *Unicode) List() (*List, error) {
	ret := C.PySequence_List(c(u))
	if ret == nil {
		return nil, exception()
	}
	return newList(ret), nil
}

func (u *Unicode) Tuple() (*Tuple, error) {
	ret := C.PySequence_Tuple(c(u))
	if ret == nil {
		return nil, exception()
	}
	return newTuple(ret), nil
}

func (u *Unicode) Concat(obj Object) (Object, error) {
	ret := C.PySequence_Concat(c(u), c(obj))
	return obj2ObjErr(ret)
}

func (u *Unicode) Repeat(count int) (Object, error) {
	ret := C.PySequence_Repeat(c(u), C.Py_ssize_t(count))
	return obj2ObjErr(ret)
}

func (u *Unicode) Contains(obj Object) (bool, error) {
	ret := C.PySequence_Contains(c(u), c(obj))
	return int2BoolErr(ret)
}

func (u *Unicode) GetSlice(start, end int) (Object, error) {
	ret := C.PySequence_GetSlice(c(u), C.Py_ssize_t(start), C.Py_ssize_t(end))
	return obj2ObjErr(ret)
}



/*
set fields:
  mp_length
  mp_subscript
  nb_remainder
  ob_base
  sq_concat
  sq_contains
  sq_item
  sq_length
  sq_repeat
  tp_as_mapping
  tp_as_number
  tp_as_sequence
  tp_basicsize
  tp_dealloc
  tp_doc
  tp_flags
  tp_free
  tp_getattro
  tp_hash
  tp_iter
  tp_methods
  tp_name
  tp_new
  tp_repr
  tp_richcompare
  tp_str
*/

