// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// ExceptionClass is the representation of the Python exception type. All
// exceptions are instances of this type.
//
// The Err and ErrV methods can be used to generate an error of a particular
// exception type.
type ExceptionClass struct {
	o C.PyObject
}

var _ Object = (*ExceptionClass)(nil)





func (e *ExceptionClass) c() *C.PyObject {
	return (*C.PyObject)(unsafe.Pointer(e))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (e *ExceptionClass) Base() *BaseObject {
	return (*BaseObject)(unsafe.Pointer(e))
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (e *ExceptionClass) Type() *Type {
	return newType(c(e).ob_type)
}

// Decref decrements e's reference count, e may not be nil.
func (e *ExceptionClass) Decref() {
	obj := (*C.PyObject)(unsafe.Pointer(e))
	refcnt := (*int)(unsafe.Pointer(&obj.anon0[0]))
	*refcnt--
	if *refcnt == 0 {
		C._Py_Dealloc(obj)
	}
}

// Incref increments e's reference count, e may not be nil.
func (e *ExceptionClass) Incref() {
	refcnt := (*int)(unsafe.Pointer(&(*C.PyObject)(unsafe.Pointer(e)).anon0[0]))
	*refcnt++
}



/*
set fields:
*/

