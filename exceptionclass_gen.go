// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// ExceptionClass is the representation of the Python exception type. All
// exceptions are instances of this type.
//
// The Err and ErrV methods can be used to generate an error of a particular
// exception type.
type ExceptionClass struct {
	o C.PyObject
}

var _ Object = (*ExceptionClass)(nil)







func (e *ExceptionClass) c() *C.PyObject {
	return (*C.PyObject)(unsafe.Pointer(e))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (e *ExceptionClass) Base() *BaseObject {
	return (*BaseObject)(unsafe.Pointer(e))
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (e *ExceptionClass) Type() *Type {
	return newType((*C.PyObject)(unsafe.Pointer(c(e).ob_type)))
}

// Decref decrements e's reference count, e may not be nil.
func (e *ExceptionClass) Decref() {
	C.decref(c(e))
}

// Incref increments e's reference count, e may not be nil.
func (e *ExceptionClass) Incref() {
	C.incref(c(e))
}

// IsTrue returns true if the value of e is considered to be True. This is
// equivalent to "if e:" in Python.
func (e *ExceptionClass) IsTrue() bool {
	ret := C.PyObject_IsTrue(c(e))
	if ret < 0 {
		panic(exception())
	}
	return ret != 0
}

// Not returns true if the value of e is considered to be False. This is
// equivalent to "if not e:" in Python.
func (e *ExceptionClass) Not() bool {
	ret := C.PyObject_Not(c(e))
	if ret < 0 {
		panic(exception())
	}
	return ret != 0
}

// Free deallocates the storage (in Python) for e. After calling this method,
// e should no longer be used.
func (e *ExceptionClass) Free() {
	free(e)
}



/*
set fields:
*/

