// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// MappingMethods is a concrete realisation of the full set of Mapping Protocol
// methods. A type that implements the "Mapping Protocol" can be turned into a
// MappingMethods instance using AsMapping.
//
// Note that the methods not already implemented on the type itself may return
// an error, as not all methods are implemented by all types that support the
// protocol.
type MappingMethods struct {
	o C.PyObject
}

var _ Object = (*MappingMethods)(nil)





func (m *MappingMethods) c() *C.PyObject {
	return (*C.PyObject)(unsafe.Pointer(m))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (m *MappingMethods) Base() *BaseObject {
	return (*BaseObject)(unsafe.Pointer(m))
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (m *MappingMethods) Type() *Type {
	return newType(c(m).ob_type)
}

// Decref decrements m's reference count, m may not be nil.
func (m *MappingMethods) Decref() {
	C.decref(c(m))
}

// Incref increments m's reference count, m may not be nil.
func (m *MappingMethods) Incref() {
	C.incref(c(m))
}

// IsTrue returns true if the value of m is considered to be True. This is
// equivalent to "if m:" in Python.
func (m *MappingMethods) IsTrue() bool {
	ret := C.PyObject_IsTrue(c(m))
	if ret < 0 {
		panic(exception())
	}
	return ret != 0
}

// Not returns true if the value of m is considered to be False. This is
// equivalent to "if not m:" in Python.
func (m *MappingMethods) Not() bool {
	ret := C.PyObject_Not(c(m))
	if ret < 0 {
		panic(exception())
	}
	return ret != 0
}

// Free deallocates the storage (in Python) for m. After calling this method,
// m should no longer be used.
func (m *MappingMethods) Free() {
	free(m)
}



/*
set fields:
*/

