// Code generated by gen_types.py. DO NOT EDIT.

// This file is automatically generated.  To regenerate:
//   go generate ./...

//go:generate ./gen_types.py /usr/local/include/python3.11

package py

// #include "utils.h"
import "C"

// ===============================================================

func getNativeType(obj *C.PyObject) Object {
	switch C.getBasePyType(obj) {
	case &C.PyBool_Type:
		return newBool(obj)
	case &C.PyByteArray_Type:
		return newByteArray(obj)
	case &C.PyBytes_Type:
		return newBytes(obj)
	case &C.PyCFunction_Type:
		return newCFunction(obj)
	case &C.PyCMethod_Type:
		return newCMethod(obj)
	case &C.PyCell_Type:
		return newCell(obj)
	case &C.PyCode_Type:
		return newCode(obj)
	case &C.PyComplex_Type:
		return newComplex(obj)
	case &C.PyDict_Type:
		return newDict(obj)
	case &C.PyDictKeys_Type:
		return newDictKeys(obj)
	case &C.PyFloat_Type:
		return newFloat(obj)
	case &C.PyFrame_Type:
		return newFrame(obj)
	case &C.PyFrozenSet_Type:
		return newFrozenSet(obj)
	case &C.PyFunction_Type:
		return newFunction(obj)
	case &C.PyGen_Type:
		return newGen(obj)
	case &C.PyInstanceMethod_Type:
		return newInstanceMethod(obj)
	case &C.PyList_Type:
		return newList(obj)
	case &C.PyLong_Type:
		return newLong(obj)
	case &C.PyMemoryView_Type:
		return newMemoryView(obj)
	case &C.PyMethod_Type:
		return newMethod(obj)
	case &C.PyModule_Type:
		return newModule(obj)
	case &C.PyODict_Type:
		return newODict(obj)
	case &C.PySet_Type:
		return newSet(obj)
	case &C.PySlice_Type:
		return newSlice(obj)
	case &C.PyTuple_Type:
		return newTuple(obj)
	case &C.PyType_Type:
		return newType(obj)
	case &C.PyUnicode_Type:
		return newUnicode(obj)
	}

	return nil;
}

// ===============================================================
