// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// BaseObject is the concrete representation of the Python "Object *".  It is
// used less than in the C API, as the Object interface is mostly used when the
// type is not fixed.  Any Object "o" can be turned into a *BaseObject using the
// Base() method (i.e. o.Base() returns a *BaseObject that refers to the same
// underlying Python object as "o").  This allows the Python functions that
// accept any type of object to be defined as methods on *BaseObject.
type BaseObject struct {
	o C.PyObject
}

var _ Object = (*BaseObject)(nil)



func newBaseObject(obj *C.PyObject) *BaseObject {
	return (*BaseObject)(unsafe.Pointer(obj))
}



func (b *BaseObject) c() *C.PyObject {
	return (*C.PyObject)(unsafe.Pointer(b))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (b *BaseObject) Base() *BaseObject {
	return b
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (b *BaseObject) Type() *Type {
	return newType(c(b).ob_type)
}


// Decref decrements b's reference count, b may not be nil.
func (b *BaseObject) Decref() {
	obj := (*C.PyObject)(unsafe.Pointer(b))
	refcnt := (*int)(unsafe.Pointer(&obj.anon0[0]))
	*refcnt--
	if *refcnt == 0 {
		C._Py_Dealloc(obj)
	}
}

// Incref increments b's reference count, b may not be nil.
func (b *BaseObject) Incref() {
	refcnt := (*int)(unsafe.Pointer(&(*C.PyObject)(unsafe.Pointer(b)).anon0[0]))
	*refcnt++
}



/*
set fields:
*/

