// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// Cell represents objects of the CellType (or PyCell_Type
// in the Python API) type.
type Cell struct {
	o C.PyCellObject
}

var _ Object = (*Cell)(nil)

// CellType is the Type object that represents the Cell type.
var CellType = newType(&C.PyCell_Type)

func cellCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.cellCheck(c(obj)) != 0
}

// AsCell casts the given obj to a Cell (i.e. the underlying
// Python Object is the same, just the type is changed). If the value cannot be
// cast to a Cell, then nil is returned.
//
// Return value: Borrowed Reference.
func AsCell(obj Object) *Cell {
	if obj == nil {
		return nil
	}
	o := c(obj)
	if C.cellCheck(o) == 0 {
		return nil
	}
	return (*Cell)(unsafe.Pointer(o))
}

func newCell(obj *C.PyObject) *Cell {
	return (*Cell)(unsafe.Pointer(obj))
}



func (ce *Cell) c() *C.PyCellObject {
	return (*C.PyCellObject)(unsafe.Pointer(ce))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (ce *Cell) Base() *BaseObject {
	return (*BaseObject)(unsafe.Pointer(ce))
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (ce *Cell) Type() *Type {
	return newType(c(ce).ob_type)
}


// Decref decrements ce's reference count, ce may not be nil.
func (ce *Cell) Decref() {
	obj := (*C.PyObject)(unsafe.Pointer(ce))
	refcnt := (*int)(unsafe.Pointer(&obj.anon0[0]))
	if *refcnt == C._Py_IMMORTAL_REFCNT {
		return
	}
	*refcnt--
	if *refcnt == 0 {
		C._Py_Dealloc(obj)
	}
}

// Incref increments ce's reference count, ce may not be nil.
func (ce *Cell) Incref() {
	refcnt := (*int)(unsafe.Pointer(&(*C.PyObject)(unsafe.Pointer(ce)).anon0[0]))
	if *refcnt == C._Py_IMMORTAL_REFCNT {
		return
	}
	*refcnt++
}

// Repr returns a String representation of "ce". This is equivalent to the
// Python "repr(ce)".
//
// Return value: New Reference.
func (ce *Cell) Repr() (*Unicode, error) {
	ret := C.PyObject_Repr(c(ce))
	if ret == nil {
		return nil, exception()
	}
	return newObject(ret).(*Unicode), nil
}

// HasAttr returns true if "ce" has the attribute "name".  This is equivalent
// to the Python "hasattr(ce, name)".
func (ce *Cell) HasAttr(name Object) bool {
	ret := C.PyObject_HasAttr(c(ce), c(name))
	return ret == 1
}

// GetAttr returns the attribute of "ce" with the name "name".  This is
// equivalent to the Python "ce.name".
//
// Return value: New Reference.
func (ce *Cell) GetAttr(name Object) (Object, error) {
	ret := C.PyObject_GetAttr(c(ce), c(name))
	return obj2ObjErr(ret)
}

// RichCompare compares "ce" with "obj" using the specified operation (LE, GE
// etc.), and returns the result.  The equivalent Python is "ce op obj", where
// op is the corresponding Python operator for op.
//
// Return value: New Reference.
func (ce *Cell) RichCompare(obj Object, op Op) (Object, error) {
	ret := C.PyObject_RichCompare(c(ce), c(obj), C.int(op))
	return obj2ObjErr(ret)
}

// RichCompare compares "ce" with "obj" using the specified operation (LE, GE
// etc.), and returns true or false.  The equivalent Python is "ce op obj",
// where op is the corresponding Python operator for op.
func (ce *Cell) RichCompareBool(obj Object, op Op) (bool, error) {
	ret := C.PyObject_RichCompareBool(c(ce), c(obj), C.int(op))
	return int2BoolErr(ret)
}



/*
set fields:
  ob_base
  tp_basicsize
  tp_clear
  tp_dealloc
  tp_doc
  tp_flags
  tp_getattro
  tp_getset
  tp_name
  tp_new
  tp_repr
  tp_richcompare
  tp_traverse
*/

