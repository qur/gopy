// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// Cell represents objects of the CellType (or PyCellType
// in the Python API) type.
type Cell struct {
	abstractObject
	o C.PyCellObject
}

// CellType is the Type object that represents the Cell type.
var CellType = (*Type)(unsafe.Pointer(&C.PyCell_Type))

func cellCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.cellCheck(c(obj)) != 0
}

func newCell(obj *C.PyObject) *Cell {
	return (*Cell)(unsafe.Pointer(obj))
}

// Repr returns a String representation of "ce". This is equivalent to the
// Python "repr(ce)".
//
// Return value: New Reference.
func (ce *Cell) Repr() (Object, error) {
	ret := C.PyObject_Repr(c(ce))
	return obj2ObjErr(ret)
}

// HasAttr returns true if "ce" has the attribute "name".  This is equivalent
// to the Python "hasattr(ce, name)".
func (ce *Cell) HasAttr(name Object) bool {
	ret := C.PyObject_HasAttr(c(ce), c(name))
	if ret == 1 {
		return true
	}
	return false
}

// GetAttr returns the attribute of "ce" with the name "name".  This is
// equivalent to the Python "ce.name".
//
// Return value: New Reference.
func (ce *Cell) GetAttr(name Object) (Object, error) {
	ret := C.PyObject_GetAttr(c(ce), c(name))
	return obj2ObjErr(ret)
}

// RichCompare compares "ce" with "obj" using the specified operation (LE, GE
// etc.), and returns the result.  The equivalent Python is "ce op obj", where
// op is the corresponding Python operator for op.
//
// Return value: New Reference.
func (ce *Cell) RichCompare(obj Object, op Op) (Object, error) {
	ret := C.PyObject_RichCompare(c(ce), c(obj), C.int(op))
	return obj2ObjErr(ret)
}

// RichCompare compares "obj" with "obj2" using the specified operation (LE, GE
// etc.), and returns true or false.  The equivalent Python is "obj op obj2",
// where op is the corresponding Python operator for op.
func (ce *Cell) RichCompareBool(obj Object, op Op) (bool, error) {
	ret := C.PyObject_RichCompareBool(c(ce), c(obj), C.int(op))
	return int2BoolErr(ret)
}



/*
set fields:
  ob_base
  tp_basicsize
  tp_clear
  tp_dealloc
  tp_doc
  tp_flags
  tp_getattro
  tp_getset
  tp_name
  tp_new
  tp_repr
  tp_richcompare
  tp_traverse
*/

