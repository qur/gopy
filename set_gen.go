// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// Set represents objects of the SetType (or PySet_Type
// in the Python API) type.
type Set struct {
	o C.PySetObject
}

var _ Object = (*Set)(nil)

// SetType is the Type object that represents the Set type.
var SetType = newType(&C.PySet_Type)

func setCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.setCheck(c(obj)) != 0
}

// AsSet casts the given obj to a Set (i.e. the underlying
// Python Object is the same, just the type is changed). If the value cannot be
// cast to a Set, then nil is returned.
//
// Return value: Borrowed Reference.
func AsSet(obj Object) *Set {
	if obj == nil {
		return nil
	}
	o := c(obj)
	if C.setCheck(o) == 0 {
		return nil
	}
	return (*Set)(unsafe.Pointer(o))
}

func newSet(obj *C.PyObject) *Set {
	return (*Set)(unsafe.Pointer(obj))
}



func (s *Set) c() *C.PySetObject {
	return (*C.PySetObject)(unsafe.Pointer(s))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (s *Set) Base() *BaseObject {
	return (*BaseObject)(unsafe.Pointer(s))
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (s *Set) Type() *Type {
	return newType(c(s).ob_type)
}

// Decref decrements s's reference count, s may not be nil.
func (s *Set) Decref() {
	C.decref(c(s))
}

// Incref increments s's reference count, s may not be nil.
func (s *Set) Incref() {
	C.incref(c(s))
}

func (s *Set) raw() *C.PyObject {
	return (*C.PyObject)(unsafe.Pointer(s))
}

// Repr returns a String representation of "s". This is equivalent to the
// Python "repr(s)".
//
// Return value: New Reference.
func (s *Set) Repr() (*Unicode, error) {
	ret := C.PyObject_Repr(c(s))
	if ret == nil {
		return nil, exception()
	}
	return newObject(ret).(*Unicode), nil
}

// Hash computes and returns the hash value of s. The equivalent
// Python is "hash(s)".
func (s *Set) Hash() (int, error) {
	ret := C.PyObject_Hash(c(s))
	if ret == -1 {
		return 0, exception()
	}
	return int(ret), nil
}

// HasAttr returns true if "s" has the attribute "name".  This is equivalent
// to the Python "hasattr(s, name)".
func (s *Set) HasAttr(name Object) bool {
	ret := C.PyObject_HasAttr(c(s), c(name))
	return ret == 1
}

// GetAttr returns the attribute of "s" with the name "name".  This is
// equivalent to the Python "s.name".
//
// Return value: New Reference.
func (s *Set) GetAttr(name Object) (Object, error) {
	ret := C.PyObject_GetAttr(c(s), c(name))
	return obj2ObjErr(ret)
}

// RichCompare compares "s" with "obj" using the specified operation (LE, GE
// etc.), and returns the result.  The equivalent Python is "s op obj", where
// op is the corresponding Python operator for op.
//
// Return value: New Reference.
func (s *Set) RichCompare(obj Object, op Op) (Object, error) {
	ret := C.PyObject_RichCompare(c(s), c(obj), C.int(op))
	return obj2ObjErr(ret)
}

// RichCompare compares "s" with "obj" using the specified operation (LE, GE
// etc.), and returns true or false.  The equivalent Python is "s op obj",
// where op is the corresponding Python operator for op.
func (s *Set) RichCompareBool(obj Object, op Op) (bool, error) {
	ret := C.PyObject_RichCompareBool(c(s), c(obj), C.int(op))
	return int2BoolErr(ret)
}

// Iter returns an Iterator that will iterate over the members of s.
func (s *Set) Iter() (Iterator, error) {
	ret := C.PyObject_GetIter(c(s))
	if ret == nil {
		return nil, exception()
	}
	return newIterator(ret)
}

// Size returns the size of s. The equivalent Python is "len(s)".
func (s *Set) Size() int {
	ret := C.PyObject_Size(c(s))
	if ret < 0 {
		clearErr();
		return 0
	}
	return int(ret)
}

func (s *Set) Contains(obj Object) (bool, error) {
	ret := C.PySequence_Contains(c(s), c(obj))
	return int2BoolErr(ret)
}

// Subtract returns the result of subtracting obj from s. The equivalent Python
// is "s - obj".
//
// Return value: New Reference.
func (s *Set) Subtract(obj Object) (Object, error) {
	ret := C.PyNumber_Subtract(c(s), c(obj))
	return obj2ObjErr(ret)
}

// And returns the bitwise and of s and obj. The equivalent Python is
// "s & obj".
//
// Return value: New Reference.
func (s *Set) And(obj Object) (Object, error) {
	ret := C.PyNumber_And(c(s), c(obj))
	return obj2ObjErr(ret)
}

// Xor returns the bitwise xor of s and obj. The equivalent Python is
// "s ^ obj".
//
// Return value: New Reference.
func (s *Set) Xor(obj Object) (Object, error) {
	ret := C.PyNumber_Xor(c(s), c(obj))
	return obj2ObjErr(ret)
}

// Or returns the bitwise or of s and obj. The equivalent Python is
// "s | obj".
//
// Return value: New Reference.
func (s *Set) Or(obj Object) (Object, error) {
	ret := C.PyNumber_Or(c(s), c(obj))
	return obj2ObjErr(ret)
}

// InPlaceSubtract returns the result of subtracting obj from s. This is done
// in place. The equivalent Python is "s -= obj".
//
// Return value: New Reference.
func (s *Set) InPlaceSubtract(obj Object) (Object, error) {
	ret := C.PyNumber_InPlaceSubtract(c(s), c(obj))
	return obj2ObjErr(ret)
}

// InPlaceAnd returns the bitwise and of s and obj. This is done in place. The
// equivalent Python is "s &= obj".
//
// Return value: New Reference.
func (s *Set) InPlaceAnd(obj Object) (Object, error) {
	ret := C.PyNumber_InPlaceAnd(c(s), c(obj))
	return obj2ObjErr(ret)
}

// InPlaceXor returns the bitwise xor of s and obj. This is done in place. The
// equivalent Python is "s ^= obj".
//
// Return value: New Reference.
func (s *Set) InPlaceXor(obj Object) (Object, error) {
	ret := C.PyNumber_InPlaceXor(c(s), c(obj))
	return obj2ObjErr(ret)
}

// InPlaceOr returns the bitwise or of s and obj. This is done in place. The
// equivalent Python is "s |= obj".
//
// Return value: New Reference.
func (s *Set) InPlaceOr(obj Object) (Object, error) {
	ret := C.PyNumber_InPlaceOr(c(s), c(obj))
	return obj2ObjErr(ret)
}



/*
set fields:
  nb_and
  nb_inplace_and
  nb_inplace_or
  nb_inplace_subtract
  nb_inplace_xor
  nb_or
  nb_subtract
  nb_xor
  ob_base
  sq_contains
  sq_length
  tp_alloc
  tp_as_number
  tp_as_sequence
  tp_basicsize
  tp_clear
  tp_dealloc
  tp_doc
  tp_flags
  tp_free
  tp_getattro
  tp_hash
  tp_init
  tp_iter
  tp_methods
  tp_name
  tp_new
  tp_repr
  tp_richcompare
  tp_traverse
  tp_vectorcall
  tp_weaklistoffset
*/

