// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// Set represents objects of the SetType (or PySetType
// in the Python API) type.
type Set struct {
	abstractObject
	o C.PySetObject
}

// SetType is the Type object that represents the Set type.
var SetType = (*Type)(unsafe.Pointer(&C.PySet_Type))

func setCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.setCheck(c(obj)) != 0
}

func newSet(obj *C.PyObject) *Set {
	return (*Set)(unsafe.Pointer(obj))
}

// Repr returns a String representation of "s". This is equivalent to the
// Python "repr(s)".
//
// Return value: New Reference.
func (s *Set) Repr() (Object, error) {
	ret := C.PyObject_Repr(c(s))
	return obj2ObjErr(ret)
}

// Hash computes and returns the hash value of s. The equivalent
// Python is "hash(s)".
func (s *Set) Hash() (int, error) {
	ret := C.PyObject_Hash(c(s))
	if ret == -1 {
		return 0, exception()
	}
	return int(ret), nil
}

func (s *Set) Size() int {
	ret := C.PyObject_Size(c(s))
	if ret < 0 {
		clearErr();
		return 0
	}
	return int(ret)
}

func (s *Set) Contains(obj Object) (bool, error) {
	ret := C.PySequence_Contains(c(s), c(obj))
	return int2BoolErr(ret)
}

// Subtract returns the result of subtracting obj from s. The equivalent Python
// is "s - obj".
//
// Return value: New Reference.
func (s *Set) Subtract(obj Object) (Object, error) {
	ret := C.PyNumber_Subtract(c(s), c(obj))
	return obj2ObjErr(ret)
}

// And returns the bitwise and of s and obj. The equivalent Python is
// "s & obj".
//
// Return value: New Reference.
func (s *Set) And(obj Object) (Object, error) {
	ret := C.PyNumber_And(c(s), c(obj))
	return obj2ObjErr(ret)
}

// Xor returns the bitwise xor of s and obj. The equivalent Python is
// "s ^ obj".
//
// Return value: New Reference.
func (s *Set) Xor(obj Object) (Object, error) {
	ret := C.PyNumber_Xor(c(s), c(obj))
	return obj2ObjErr(ret)
}

// Or returns the bitwise or of s and obj. The equivalent Python is
// "s | obj".
//
// Return value: New Reference.
func (s *Set) Or(obj Object) (Object, error) {
	ret := C.PyNumber_Or(c(s), c(obj))
	return obj2ObjErr(ret)
}

// InPlaceSubtract returns the result of subtracting obj from s. This is done
// in place. The equivalent Python is "s -= obj".
//
// Return value: New Reference.
func (s *Set) InPlaceSubtract(obj Object) (Object, error) {
	ret := C.PyNumber_InPlaceSubtract(c(s), c(obj))
	return obj2ObjErr(ret)
}

// InPlaceAnd returns the bitwise and of s and obj. This is done in place. The
// equivalent Python is "s &= obj".
//
// Return value: New Reference.
func (s *Set) InPlaceAnd(obj Object) (Object, error) {
	ret := C.PyNumber_InPlaceAnd(c(s), c(obj))
	return obj2ObjErr(ret)
}

// InPlaceXor returns the bitwise xor of s and obj. This is done in place. The
// equivalent Python is "s ^= obj".
//
// Return value: New Reference.
func (s *Set) InPlaceXor(obj Object) (Object, error) {
	ret := C.PyNumber_InPlaceXor(c(s), c(obj))
	return obj2ObjErr(ret)
}

// InPlaceOr returns the bitwise or of s and obj. This is done in place. The
// equivalent Python is "s |= obj".
//
// Return value: New Reference.
func (s *Set) InPlaceOr(obj Object) (Object, error) {
	ret := C.PyNumber_InPlaceOr(c(s), c(obj))
	return obj2ObjErr(ret)
}



/*
set fields:
  nb_and
  nb_inplace_and
  nb_inplace_or
  nb_inplace_subtract
  nb_inplace_xor
  nb_or
  nb_subtract
  nb_xor
  ob_base
  sq_contains
  sq_length
  tp_alloc
  tp_as_number
  tp_as_sequence
  tp_basicsize
  tp_clear
  tp_dealloc
  tp_doc
  tp_flags
  tp_free
  tp_getattro
  tp_hash
  tp_init
  tp_iter
  tp_methods
  tp_name
  tp_new
  tp_repr
  tp_richcompare
  tp_traverse
  tp_vectorcall
  tp_weaklistoffset
*/

