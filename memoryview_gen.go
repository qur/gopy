// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

type MemoryView struct {
	abstractObject
	o C.PyMemoryViewObject
}

// MemoryViewType is the Type object that represents the MemoryView type.
var MemoryViewType = (*Type)(unsafe.Pointer(&C.PyMemoryView_Type))

func memoryViewCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.memoryViewCheck(c(obj)) != 0
}

func newMemoryView(obj *C.PyObject) *MemoryView {
	return (*MemoryView)(unsafe.Pointer(obj))
}

func (m *MemoryView) Size() int {
	ret := C.PyObject_Size(c(m))
	if ret < 0 {
		return 0
	}
	return int(ret)
}

func (m *MemoryView) GetItemString(key string) (Object, error) {
	cKey := C.CString(key)
	defer C.free(unsafe.Pointer(cKey))
	ret := C.PyMapping_GetItemString(c(m), cKey)
	return obj2ObjErr(ret)
}

func (m *MemoryView) HasKey(key Object) bool {
	ret := C.PyMapping_HasKey(c(m), c(key))
	return ret > 0
}

func (m *MemoryView) HasKeyString(key string) bool {
	cKey := C.CString(key)
	defer C.free(unsafe.Pointer(cKey))
	ret := C.PyMapping_HasKeyString(c(m), cKey)
	return ret > 0
}

func (m *MemoryView) DelItem(key Object) error {
	ret := C.PyObject_DelItem(c(m), c(key))
	return int2Err(ret)
}

func (m *MemoryView) DelItemString(key string) error {
	cKey := C.CString(key)
	defer C.free(unsafe.Pointer(cKey))
	ret := C.PyObject_DelItemString(c(m), cKey)
	return int2Err(ret)
}

func (m *MemoryView) SetItemString(key string, v Object) error {
	cKey := C.CString(key)
	defer C.free(unsafe.Pointer(cKey))
	ret := C.PyMapping_SetItemString(c(m), cKey, c(v))
	return int2Err(ret)
}

/*
bf_getbuffer = true
bf_releasebuffer = true
mp_ass_subscript = true
mp_length = true
mp_subscript = true
ob_base = true
sq_item = true
sq_length = true
tp_as_buffer = true
tp_as_mapping = true
tp_as_sequence = true
tp_basicsize = true
tp_clear = true
tp_dealloc = true
tp_doc = true
tp_flags = true
tp_getattro = true
tp_getset = true
tp_hash = true
tp_itemsize = true
tp_iter = true
tp_methods = true
tp_name = true
tp_new = true
tp_repr = true
tp_richcompare = true
tp_traverse = true
tp_weaklistoffset = true
*/

