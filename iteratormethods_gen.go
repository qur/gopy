// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// IteratorMethods represents an arbitrary Python iterator.
type IteratorMethods struct {
	o C.PyObject
}

var _ Object = (*IteratorMethods)(nil)





func (i *IteratorMethods) c() *C.PyObject {
	return (*C.PyObject)(unsafe.Pointer(i))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (i *IteratorMethods) Base() *BaseObject {
	return (*BaseObject)(unsafe.Pointer(i))
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (i *IteratorMethods) Type() *Type {
	return newType(c(i).ob_type)
}

// Decref decrements i's reference count, i may not be nil.
func (i *IteratorMethods) Decref() {
	C.decref(c(i))
}

// Incref increments i's reference count, i may not be nil.
func (i *IteratorMethods) Incref() {
	C.incref(c(i))
}

// IsTrue returns true if the value of i is considered to be True. This is
// equivalent to "if i:" in Python.
func (i *IteratorMethods) IsTrue() bool {
	ret := C.PyObject_IsTrue(c(i))
	if ret < 0 {
		panic(exception())
	}
	return ret != 0
}

// Not returns true if the value of i is considered to be False. This is
// equivalent to "if not i:" in Python.
func (i *IteratorMethods) Not() bool {
	ret := C.PyObject_Not(c(i))
	if ret < 0 {
		panic(exception())
	}
	return ret != 0
}

// Free deallocates the storage (in Python) for i. After calling this method,
// i should no longer be used.
func (i *IteratorMethods) Free() {
	free(i)
}



/*
set fields:
*/

