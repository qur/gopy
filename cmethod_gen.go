// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// CMethod represents objects of the CMethodType (or PyCMethod_Type
// in the Python API) type.
type CMethod struct {
	o C.PyCMethodObject
}

var _ Object = (*CMethod)(nil)

// CMethodType is the Type object that represents the CMethod type.
var CMethodType = newType(&C.PyCMethod_Type)

func cMethodCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.cMethodCheck(c(obj)) != 0
}

// AsCMethod casts the given obj to a CMethod (i.e. the underlying
// Python Object is the same, just the type is changed). If the value cannot be
// cast to a CMethod, then nil is returned.
//
// Return value: Borrowed Reference.
func AsCMethod(obj Object) *CMethod {
	if obj == nil {
		return nil
	}
	o := c(obj)
	if C.cMethodCheck(o) == 0 {
		return nil
	}
	return (*CMethod)(unsafe.Pointer(o))
}

func newCMethod(obj *C.PyObject) *CMethod {
	return (*CMethod)(unsafe.Pointer(obj))
}



func (cm *CMethod) c() *C.PyCMethodObject {
	return (*C.PyCMethodObject)(unsafe.Pointer(cm))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (cm *CMethod) Base() *BaseObject {
	return (*BaseObject)(unsafe.Pointer(cm))
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (cm *CMethod) Type() *Type {
	return newType(c(cm).ob_type)
}


// Decref decrements cm's reference count, cm may not be nil.
func (cm *CMethod) Decref() {
	obj := (*C.PyObject)(unsafe.Pointer(cm))
	refcnt := (*int)(unsafe.Pointer(&obj.anon0[0]))
	if *refcnt == C._Py_IMMORTAL_REFCNT {
		return
	}
	*refcnt--
	if *refcnt == 0 {
		C._Py_Dealloc(obj)
	}
}

// Incref increments cm's reference count, cm may not be nil.
func (cm *CMethod) Incref() {
	refcnt := (*int)(unsafe.Pointer(&(*C.PyObject)(unsafe.Pointer(cm)).anon0[0]))
	if *refcnt == C._Py_IMMORTAL_REFCNT {
		return
	}
	*refcnt++
}



/*
set fields:
  ob_base
  tp_base
  tp_basicsize
  tp_name
*/

