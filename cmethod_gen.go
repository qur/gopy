// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// CMethod represents objects of the CMethodType (or PyCMethod_Type
// in the Python API) type.
type CMethod struct {
	o C.PyCMethodObject
}

var _ Object = (*CMethod)(nil)

// CMethodType is the Type object that represents the CMethod type.
var CMethodType = newType(&C.PyCMethod_Type)

func cMethodCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.cMethodCheck(c(obj)) != 0
}

func newCMethod(obj *C.PyObject) *CMethod {
	return (*CMethod)(unsafe.Pointer(obj))
}



func (cm *CMethod) c() *C.PyCMethodObject {
	return (*C.PyCMethodObject)(unsafe.Pointer(cm))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (cm *CMethod) Base() *BaseObject {
	return (*BaseObject)(unsafe.Pointer(cm))
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (cm *CMethod) Type() *Type {
	return newType(c(cm).ob_type)
}

// Decref decrements cm's reference count, cm may not be nil.
func (cm *CMethod) Decref() {
	C.decref(c(cm))
}

// Incref increments cm's reference count, cm may not be nil.
func (cm *CMethod) Incref() {
	C.incref(c(cm))
}

func (cm *CMethod) raw() *C.PyObject {
	return (*C.PyObject)(unsafe.Pointer(cm))
}



/*
set fields:
  ob_base
  tp_base
  tp_basicsize
  tp_name
*/

