// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// BufferMethods represents an arbitrary Python type that implements the Buffer
// Protocol.
type BufferMethods struct {
	o C.PyObject
}

var _ Object = (*BufferMethods)(nil)





func (b *BufferMethods) c() *C.PyObject {
	return (*C.PyObject)(unsafe.Pointer(b))
}

// Base returns a BaseObject pointer that gives access to the generic methods on
// that type for this object.
func (b *BufferMethods) Base() *BaseObject {
	return (*BaseObject)(unsafe.Pointer(b))
}

// Type returns a pointer to the Type that represents the type of this object in
// Python.
func (b *BufferMethods) Type() *Type {
	return newType(c(b).ob_type)
}

// Decref decrements b's reference count, b may not be nil.
func (b *BufferMethods) Decref() {
	C.decref(c(b))
}

// Incref increments b's reference count, b may not be nil.
func (b *BufferMethods) Incref() {
	C.incref(c(b))
}

// IsTrue returns true if the value of b is considered to be True. This is
// equivalent to "if b:" in Python.
func (b *BufferMethods) IsTrue() bool {
	ret := C.PyObject_IsTrue(c(b))
	if ret < 0 {
		panic(exception())
	}
	return ret != 0
}

// Not returns true if the value of b is considered to be False. This is
// equivalent to "if not b:" in Python.
func (b *BufferMethods) Not() bool {
	ret := C.PyObject_Not(c(b))
	if ret < 0 {
		panic(exception())
	}
	return ret != 0
}

// Free deallocates the storage (in Python) for b. After calling this method,
// b should no longer be used.
func (b *BufferMethods) Free() {
	free(b)
}



/*
set fields:
*/

