// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

type ODict struct {
	abstractObject
	o C.PyODictObject
}

// ODictType is the Type object that represents the ODict type.
var ODictType = (*Type)(unsafe.Pointer(&C.PyODict_Type))

func oDictCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.oDictCheck(c(obj)) != 0
}

func newODict(obj *C.PyObject) *ODict {
	return (*ODict)(unsafe.Pointer(obj))
}





func (o *ODict) DelItem(key Object) error {
	ret := C.PyObject_DelItem(c(o), c(key))
	return int2Err(ret)
}

func (o *ODict) DelItemString(key string) error {
	cKey := C.CString(key)
	defer C.free(unsafe.Pointer(cKey))
	ret := C.PyObject_DelItemString(c(o), cKey)
	return int2Err(ret)
}

func (o *ODict) SetItemString(key string, v Object) error {
	cKey := C.CString(key)
	defer C.free(unsafe.Pointer(cKey))
	ret := C.PyMapping_SetItemString(c(o), cKey, c(v))
	return int2Err(ret)
}

/*
mp_ass_subscript = true
nb_inplace_or = true
nb_or = true
ob_base = true
tp_alloc = true
tp_as_mapping = true
tp_as_number = true
tp_base = true
tp_basicsize = true
tp_clear = true
tp_dealloc = true
tp_dictoffset = true
tp_doc = true
tp_flags = true
tp_getset = true
tp_init = true
tp_iter = true
tp_methods = true
tp_name = true
tp_repr = true
tp_richcompare = true
tp_traverse = true
tp_weaklistoffset = true
*/

