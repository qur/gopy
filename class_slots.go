// Code generated by gen_slots.py. DO NOT EDIT.

// This file is automatically generated.  To regenerate:
//   go generate ./...

//go:generate ./gen_slots.py

package py

// #include "utils.h"
import "C"

import (
	"reflect"
	"unsafe"
)

// ===============================================================

type tp_repr interface {
	PyRepr() string
}
type tp_hash interface {
	PyHash() (uint32, error)
}
type tp_call interface {
	PyCall(*Tuple, *Dict) (Object, error)
}
type tp_str interface {
	PyStr() string
}
type tp_getattro interface {
	PyGetAttr(Object) (Object, error)
}
type tp_setattro interface {
	PySetAttr(Object, Object) error
}
type tp_iter interface {
	PyIter() (Object, error)
}
type tp_iternext interface {
	PyIterNext() (Object, error)
}
type tp_descr_get interface {
	PyDescrGet(Object, Object) (Object, error)
}
type tp_descr_set interface {
	PyDescrSet(Object, Object) error
}
type tp_init interface {
	PyInit(*Tuple, *Dict) error
}
type am_await interface {
	PyAwait() (Object, error)
}
type am_aiter interface {
	PyAsyncIter() (Object, error)
}
type am_anext interface {
	PyAsyncNext() (Object, error)
}
type mp_length interface {
	PyMappingLen() int
}
type mp_subscript interface {
	PySubscript(Object) (Object, error)
}
type mp_ass_subscript interface {
	PyAssSubscript(Object, Object) error
}
type sq_length interface {
	PyLen() int
}
type sq_concat interface {
	PyConcat(Object) (Object, error)
}
type sq_repeat interface {
	PyRepeat(Object, int) (Object, error)
}
type sq_item interface {
	PyItem(Object, int) (Object, error)
}
type sq_ass_item interface {
	PyAssItem(Object, int, Object) error
}
type sq_contains interface {
	PyContains(Object) (bool, error)
}
type sq_inplace_concat interface {
	PyInplaceConcat(Object) (Object, error)
}
type sq_inplace_repeat interface {
	PyInplaceRepeat(Object, int) (Object, error)
}
type bf_getbuffer interface {
	PyGetBuffer(Object, int) error
}
type bf_releasebuffer interface {
	PyReleaseBuffer(Object)
}

// ===============================================================
// ===============================================================

//export goClassSlot_tp_repr
func goClassSlot_tp_repr(obj unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(tp_repr)

	s := C.CString(co.PyRepr())
	defer C.free(unsafe.Pointer(s))

	return unsafe.Pointer(C.PyUnicode_FromString(s))
}
//export goClassSlot_tp_hash
func goClassSlot_tp_hash(obj unsafe.Pointer) C.long {
	co := newObject((*C.PyObject)(obj)).(tp_hash)

	ret, err := co.PyHash()
	if err != nil {
		raise(err)
		return -1
	} else if C.long(ret) == -1 {
		return -2
	}

	return C.long(ret)
}
//export goClassSlot_tp_call
func goClassSlot_tp_call(obj, args, kwds unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(tp_call)

	a := newTuple((*C.PyObject)(args))
	k := newDict((*C.PyObject)(kwds))
	ret, err := co.PyCall(a, k)
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_tp_str
func goClassSlot_tp_str(obj unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(tp_str)

	s := C.CString(co.PyStr())
	defer C.free(unsafe.Pointer(s))

	return unsafe.Pointer(C.PyUnicode_FromString(s))
}
//export goClassSlot_tp_getattro
func goClassSlot_tp_getattro(obj, arg unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(tp_getattro)

	o := newObject((*C.PyObject)(arg))
	ret, err := co.PyGetAttr(o)
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_tp_setattro
func goClassSlot_tp_setattro(obj, arg1, arg2 unsafe.Pointer) int {
	co := newObject((*C.PyObject)(obj)).(tp_setattro)

	o1 := newObject((*C.PyObject)(arg1))
	o2 := newObject((*C.PyObject)(arg2))
	if err := co.PySetAttr(o1, o2); err != nil {
		raise(err)
		return -1
	}

	return 0
}
//export goClassSlot_tp_iter
func goClassSlot_tp_iter(obj unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(tp_iter)

	ret, err := co.PyIter()
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_tp_iternext
func goClassSlot_tp_iternext(obj unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(tp_iternext)

	ret, err := co.PyIterNext()
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_tp_descr_get
func goClassSlot_tp_descr_get(obj, arg1, arg2 unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(tp_descr_get)

	o1 := newObject((*C.PyObject)(arg1))
	o2 := newObject((*C.PyObject)(arg2))
	ret, err := co.PyDescrGet(o1, o2)
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_tp_descr_set
func goClassSlot_tp_descr_set(obj, arg1, arg2 unsafe.Pointer) int {
	co := newObject((*C.PyObject)(obj)).(tp_descr_set)

	o1 := newObject((*C.PyObject)(arg1))
	o2 := newObject((*C.PyObject)(arg2))
	if err := co.PyDescrSet(o1, o2); err != nil {
		raise(err)
		return -1
	}

	return 0
}
//export goClassSlot_tp_init
func goClassSlot_tp_init(obj, args, kwds unsafe.Pointer) int {
	co := newObject((*C.PyObject)(obj)).(tp_init)

	a := newTuple((*C.PyObject)(args))
	k := newDict((*C.PyObject)(kwds))
	if err := co.PyInit(a, k); err != nil {
		raise(err)
		return -1
	}

	return 0
}
//export goClassSlot_am_await
func goClassSlot_am_await(obj unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(am_await)

	ret, err := co.PyAwait()
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_am_aiter
func goClassSlot_am_aiter(obj unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(am_aiter)

	ret, err := co.PyAsyncIter()
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_am_anext
func goClassSlot_am_anext(obj unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(am_anext)

	ret, err := co.PyAsyncNext()
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_mp_length
func goClassSlot_mp_length(obj unsafe.Pointer) C.Py_ssize_t {
	co := newObject((*C.PyObject)(obj)).(mp_length)

	return C.Py_ssize_t(co.PyMappingLen())
}
//export goClassSlot_mp_subscript
func goClassSlot_mp_subscript(obj, arg unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(mp_subscript)

	o := newObject((*C.PyObject)(arg))
	ret, err := co.PySubscript(o)
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_mp_ass_subscript
func goClassSlot_mp_ass_subscript(obj, arg1, arg2 unsafe.Pointer) int {
	co := newObject((*C.PyObject)(obj)).(mp_ass_subscript)

	o1 := newObject((*C.PyObject)(arg1))
	o2 := newObject((*C.PyObject)(arg2))
	if err := co.PyAssSubscript(o1, o2); err != nil {
		raise(err)
		return -1
	}

	return 0
}
//export goClassSlot_sq_length
func goClassSlot_sq_length(obj unsafe.Pointer) C.Py_ssize_t {
	co := newObject((*C.PyObject)(obj)).(sq_length)

	return C.Py_ssize_t(co.PyLen())
}
//export goClassSlot_sq_concat
func goClassSlot_sq_concat(obj, arg unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(sq_concat)

	o := newObject((*C.PyObject)(arg))
	ret, err := co.PyConcat(o)
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_sq_repeat
func goClassSlot_sq_repeat(obj, arg1 unsafe.Pointer, arg2 C.Py_ssize_t) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(sq_repeat)

	o := newObject((*C.PyObject)(arg1))
	ret, err := co.PyRepeat(o, int(arg2))
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_sq_item
func goClassSlot_sq_item(obj, arg1 unsafe.Pointer, arg2 C.Py_ssize_t) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(sq_item)

	o := newObject((*C.PyObject)(arg1))
	ret, err := co.PyItem(o, int(arg2))
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_sq_ass_item
func goClassSlot_sq_ass_item(obj, arg1 unsafe.Pointer, arg2 C.Py_ssize_t, arg3 unsafe.Pointer) C.int {
	co := newObject((*C.PyObject)(obj)).(sq_ass_item)

	o1 := newObject((*C.PyObject)(arg1))
	o3 := newObject((*C.PyObject)(arg1))
	if err := co.PyAssItem(o1, int(arg2), o3); err != nil {
		raise(err)
		return -1
	}

	return 0
}
//export goClassSlot_sq_contains
func goClassSlot_sq_contains(obj, arg unsafe.Pointer) int {
	co := newObject((*C.PyObject)(obj)).(sq_contains)

	o := newObject((*C.PyObject)(arg))
	ret, err := co.PyContains(o)
	if err != nil {
		raise(err)
		return -1
	}

	if ret {
		return 1
	}

	return 0
}
//export goClassSlot_sq_inplace_concat
func goClassSlot_sq_inplace_concat(obj, arg unsafe.Pointer) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(sq_inplace_concat)

	o := newObject((*C.PyObject)(arg))
	ret, err := co.PyInplaceConcat(o)
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_sq_inplace_repeat
func goClassSlot_sq_inplace_repeat(obj, arg1 unsafe.Pointer, arg2 C.Py_ssize_t) unsafe.Pointer {
	co := newObject((*C.PyObject)(obj)).(sq_inplace_repeat)

	o := newObject((*C.PyObject)(arg1))
	ret, err := co.PyInplaceRepeat(o, int(arg2))
	if err != nil {
		raise(err)
		return nil
	}

	return unsafe.Pointer(c(ret))
}
//export goClassSlot_bf_getbuffer
func goClassSlot_bf_getbuffer(obj, arg1 unsafe.Pointer, arg2 C.int) int {
	co := newObject((*C.PyObject)(obj)).(bf_getbuffer)

	o := newObject((*C.PyObject)(arg1))
	if err := co.PyGetBuffer(o, int(arg2)); err != nil {
		raise(err)
		return -1
	}

	return 0
}
//export goClassSlot_bf_releasebuffer
func goClassSlot_bf_releasebuffer(obj, arg unsafe.Pointer) {
	co := newObject((*C.PyObject)(obj)).(bf_releasebuffer)

	o := newObject((*C.PyObject)(arg))
	co.PyReleaseBuffer(o)
}

// ===============================================================
// ===============================================================

var slotMap = map[C.uint64_t]reflect.Type{
	C.CLASS_HAS_TP_REPR: reflect.TypeOf((*tp_repr)(nil)).Elem(),
	C.CLASS_HAS_TP_HASH: reflect.TypeOf((*tp_hash)(nil)).Elem(),
	C.CLASS_HAS_TP_CALL: reflect.TypeOf((*tp_call)(nil)).Elem(),
	C.CLASS_HAS_TP_STR: reflect.TypeOf((*tp_str)(nil)).Elem(),
	C.CLASS_HAS_TP_GETATTRO: reflect.TypeOf((*tp_getattro)(nil)).Elem(),
	C.CLASS_HAS_TP_SETATTRO: reflect.TypeOf((*tp_setattro)(nil)).Elem(),
	C.CLASS_HAS_TP_ITER: reflect.TypeOf((*tp_iter)(nil)).Elem(),
	C.CLASS_HAS_TP_ITERNEXT: reflect.TypeOf((*tp_iternext)(nil)).Elem(),
	C.CLASS_HAS_TP_DESCR_GET: reflect.TypeOf((*tp_descr_get)(nil)).Elem(),
	C.CLASS_HAS_TP_DESCR_SET: reflect.TypeOf((*tp_descr_set)(nil)).Elem(),
	C.CLASS_HAS_TP_INIT: reflect.TypeOf((*tp_init)(nil)).Elem(),
	C.CLASS_HAS_AM_AWAIT: reflect.TypeOf((*am_await)(nil)).Elem(),
	C.CLASS_HAS_AM_AITER: reflect.TypeOf((*am_aiter)(nil)).Elem(),
	C.CLASS_HAS_AM_ANEXT: reflect.TypeOf((*am_anext)(nil)).Elem(),
	C.CLASS_HAS_MP_LENGTH: reflect.TypeOf((*mp_length)(nil)).Elem(),
	C.CLASS_HAS_MP_SUBSCRIPT: reflect.TypeOf((*mp_subscript)(nil)).Elem(),
	C.CLASS_HAS_MP_ASS_SUBSCRIPT: reflect.TypeOf((*mp_ass_subscript)(nil)).Elem(),
	C.CLASS_HAS_SQ_LENGTH: reflect.TypeOf((*sq_length)(nil)).Elem(),
	C.CLASS_HAS_SQ_CONCAT: reflect.TypeOf((*sq_concat)(nil)).Elem(),
	C.CLASS_HAS_SQ_REPEAT: reflect.TypeOf((*sq_repeat)(nil)).Elem(),
	C.CLASS_HAS_SQ_ITEM: reflect.TypeOf((*sq_item)(nil)).Elem(),
	C.CLASS_HAS_SQ_ASS_ITEM: reflect.TypeOf((*sq_ass_item)(nil)).Elem(),
	C.CLASS_HAS_SQ_CONTAINS: reflect.TypeOf((*sq_contains)(nil)).Elem(),
	C.CLASS_HAS_SQ_INPLACE_CONCAT: reflect.TypeOf((*sq_inplace_concat)(nil)).Elem(),
	C.CLASS_HAS_SQ_INPLACE_REPEAT: reflect.TypeOf((*sq_inplace_repeat)(nil)).Elem(),
	C.CLASS_HAS_BF_GETBUFFER: reflect.TypeOf((*bf_getbuffer)(nil)).Elem(),
	C.CLASS_HAS_BF_RELEASEBUFFER: reflect.TypeOf((*bf_releasebuffer)(nil)).Elem(),
}

// ===============================================================
