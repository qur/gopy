// Code generated by gen_types. DO NOT EDIT.

package py

// #include "utils.h"
import "C"

import (
	"unsafe"
)

// Gen represents objects of the GenType (or PyGenType
// in the Python API) type.
//
// This type implements the Iterator protocol.
type Gen struct {
	abstractObject
	o C.PyGenObject
}

// GenType is the Type object that represents the Gen type.
var GenType = (*Type)(unsafe.Pointer(&C.PyGen_Type))

func genCheck(obj Object) bool {
	if obj == nil {
		return false
	}
	return C.genCheck(c(obj)) != 0
}

func newGen(obj *C.PyObject) *Gen {
	return (*Gen)(unsafe.Pointer(obj))
}

// Repr returns a String representation of "g". This is equivalent to the
// Python "repr(g)".
//
// Return value: New Reference.
func (g *Gen) Repr() (Object, error) {
	ret := C.PyObject_Repr(c(g))
	return obj2ObjErr(ret)
}

// HasAttr returns true if "g" has the attribute "name".  This is equivalent
// to the Python "hasattr(g, name)".
func (g *Gen) HasAttr(name Object) bool {
	ret := C.PyObject_HasAttr(c(g), c(name))
	if ret == 1 {
		return true
	}
	return false
}

// GetAttr returns the attribute of "g" with the name "name".  This is
// equivalent to the Python "g.name".
//
// Return value: New Reference.
func (g *Gen) GetAttr(name Object) (Object, error) {
	ret := C.PyObject_GetAttr(c(g), c(name))
	return obj2ObjErr(ret)
}

func (g *Gen) Iter() (Object, error) {
	ret := C.PyObject_GetIter(c(g))
	return obj2ObjErr(ret)
}

// AsIterator returns a IteratorMethods instance that refers to the same
// underlying Python object as g.
//
// This method also means that Gen implements the Iterator interface.
func (g *Gen) AsIterator() *IteratorMethods {
	return (*IteratorMethods)(unsafe.Pointer(g.Base()))
}

func (g *Gen) Next() (Object, error) {
	ret := C.PyIter_Next(c(g))
	return obj2ObjErr(ret)
}



/*
set fields:
  am_send
  ob_base
  tp_as_async
  tp_basicsize
  tp_dealloc
  tp_finalize
  tp_flags
  tp_getattro
  tp_getset
  tp_itemsize
  tp_iter
  tp_iternext
  tp_members
  tp_methods
  tp_name
  tp_repr
  tp_traverse
  tp_weaklistoffset
*/

